# Stages are run in sequence, jobs in the same stage are run in parallel
# See https://docs.gitlab.com/ce/ci/yaml/
# TODO: Correct the tags to fit your gitlab


stages:
  - prepare
  - build
  - push
  - deploy




# Specify custom variables
# variables:
#   # Enables multibranch build
#   COMPOSE_PROJECT_NAME: $CI_PROJECT_NAME-$CI_BUILD_REF_NAME
#   # How to store the image
#   IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME

# Prepare
# -------
# Removes old images and containers, if they exist
prepare:clean:
  stage: prepare
  script:
    # Stop all containers
    - docker-compose -f development.yml stop
    # Remove all containers and volumes
    - docker-compose -f development.yml rm -fv
    - docker-compose -f development.yml ps
  tags:
    - dev

# Install
# -------
# Build all images
build:containers:
  stage: build
  script:
    # Build the Containers without caching and newest source image
    - docker-compose -f development.yml  build --pull
  tags:
    - dev

# Push
# ----
# Pushes the Docker image to th registry for selected tags
push:image:
  stage: push
  script:
    # Login to the registry
    # - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    # Push images to the gitlab remote
    - ./get_release_version.sh
    - docker-compose -f build.yml build
    - - docker-compose -f build.yml push
    # - echo "Released ${RELEASE_TAG} at $(date)"> /library/media_root/release_version.log
  # Only these branches are getting pushed
  only:
    - bikram-stack
  tags:
    - prod
# Deploy
# ------
# Starts the containers
deploy:http:
  stage: deploy
  script:
    # Bring up the app
    - docker-compose -f development.yml up -d
  tags:
    - dev

#!/bin/bash

#Author Bikram Dhoju <bikram.dhoju@olenepal.org>

#set -o errexit
esc=""
redf="${esc}[31m"
whitef="${esc}[37m"
reset="${esc}[0m"
remote_backup="/share/Deployment/backup-pustakalaya-django"
container_name="postgres_01"
croncmd_backup="docker exec -it postgres_01 bash -c '/script/autopgsqlbackup'"
cronjob_backup="*/5 * * * * $croncmd_backup"
local_backup="/library/backup_pg_pustakalaya/backup/daily/pustakalaya"

# print a pretty header
echo "++++++++++++ORCHEASTRATE PUSTAKALAYA+++++++++++++++++++++++++++++"

function usage {

   echo "${redf}Usage:${reset} `basename $0` rund: ${whitef}docker-compose up -d${reset}"
  echo "${redf}Usage:${reset} `basename $0` run:  ${whitef}docker-compose up${reset}"
  echo "${redf}Usage:${reset} `basename $0` build: ${whitef}docker-compose --build${reset}"
  echo "${redf}Usage:${reset} `basename $0` mkmigration: ${whitef}making gration in django_web_01${reset}"
  echo "${redf}Usage:${reset} `basename $0` migrate: ${whitef}migrating in django_web_01${reset}"
  echo "${redf}Usage:${reset} `basename $0` remove: ${whitef}docker-compose rm${reset}"
  echo "${redf}Usage:${reset} `basename $0` dump_sql: ${whitef}./src/db_dump/pustakalaya.sql${reset}"
  exit 0



}

if [[ "$1" == "-h" || "$1" == "--help"|| "$#" == 0 ]]; then
 
fi





if [ $# -ne 1 ] ; then
 echo "Usage: $0 command" >&2 ; exit 1
fi
# runs as root or needs sudo?
if [[ "$EUID" -ne 0 ]]; then
  sudo='sudo'
else
  sudo=''
fi

function die {
    echo 1>&2 ERROR: "$*"
    exit 1
}
spinner()
{
    local pid=$1
    local delay=0.75
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}


function program_is_installed {
    # set to 1 initially
    local return_=1
    # set to 0 if not found
    type $1 >/dev/null 2>&1 || { local return_=0; }
    # return value
    echo $return_
}

# Checking if docker and docker-compose has been pre installed or not
# echo "Checking if docker and docker-compose has been pre installed or not"



if [ $(program_is_installed "docker") -eq 0 ] || [ $(program_is_installed "docker-compose") -eq 0 ] ; then
    die "Docker and/or Docker-compose does not seem to be installed in the system. Please install it"

fi

function backup {

        if [ $(docker inspect -f '{{.State.Running}}' $container_name) = "true" ]; then
              echo "getBack up of postgres"
              docker exec postgres_01 bash -c "/script/autopgsqlbackup";
              echo "backing up the database to file server at location $remote_backup"
              rsync -a -e "ssh -i /var/lib/jenkins/.ssh/id_rsa" --delete /library/backup_pg_pustakalaya/backup root@192.168.5.20:$remote_backup
              echo "backing up the media and static  to fileserver at location $remote_backup"
              rsync -a -e "ssh -i /var/lib/jenkins/.ssh/id_rsa"  --delete /library/{media_root,static_root} root@192.168.5.20:$remote_backup
              echo "Successfully backed up to fileserver"
        else
              echo "Container $container_name is not running";
        fi


}

function docker_build {

  echo "Building docker conatiners"
  docker-compose build


}

function docker_stop {
  echo "stopping docker conatiners"
  docker-compose stop
}


function docker_run_daemon {
  echo "running docker daemon"
  docker-compose up -d

}


function docker_up {
  echo "running docker daemon"
  docker-compose up

}
function docker_remove {
  echo "removing stopped containers"
  docker-compose rm -f
}

function docker_system_prune {
  echo "removing all stopped containers/networks/images"
  docker system prune -af
}

function import_sql {
  backup_file_bz2=$(ls $local_backup | tail -n 1 )
  echo "backup file is $backup_file_bz2"
  pushd $local_backup
  if [[ -f $backup_file_bz2 ]] ; then
    bzip2 -dk $backup_file_bz2 
    backup_file_sql=${backup_file_bz2%.*}
    docker exec postgres_01 bash -c "psql --username pustakalaya_user -d pustakalaya -f /pg_backups/backup/daily/pustakalaya/$backup_file_sql"
    if [ $? -eq 0 ]; then
      echo "Dumpped  from $backup_file_sql"
      rm -rvf $local_backup/*sql

    else
      echo "Failed Dumping file"
    fi

  else
    echo "No backup file found. Please backup first"
  fi
  popd

}



function django_mkmigration {
  echo "making migration for django app"
  docker exec django_web_01 bash -c "python manage.py makemigrations --merge --noinput --settings=pustakalaya.settings.production"

}


function django_migrate {
  echo "migrating for django app"
  docker exec django_web_01 bash -c "python manage.py migrate --settings=pustakalaya.settings.production"

}

function docker_es_index {
  echo "Elastic search indexing"
  docker exec django_web_01 bash -c "python manage.py index_pustakalaya --settings=pustakalaya.settings.production"
}

function django_collectstatic {
  echo "collecting static files"
  docker exec django_web_01 bash -c "python manage.py collectstatic --settings=pustakalaya.settings.production --noinput"
}



case $1 in
    dbuild) 
        docker_build
        ;;
    drund) 
        docker_run_daemon
        ;;
    drun) 
        docker_up
        ;;
    dstop) 
        docker_stop
        ;;
    dup) 
        docker_up
        ;;
    dremove) 
        docker_remove
        ;;
    dprune) 
        docker_system_prune
        ;;
    db_import) 
        import_sql
        ;;
    django_mkmigration) 
        django_mkmigration
        ;;
    django_cs) 
        django_collectstatic
        ;;
    django_migrate) 
        django_migrate
        ;;
    es_index) 
        docker_es_index
        ;;
  # 5), 6) etc.
    *) # anything else
        usage
        ;;
esac
